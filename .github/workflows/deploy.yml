name: Deploy Slidev Presentations

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [main] # Or your primary branch name

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages # Group by 'pages' to cancel in-progress runs on new commits
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*" # Use the latest Long-Term Support Node.js version
          # ni will choose the package manager based on your lock file (pnpm-lock.yaml or package-lock.json)
          # If you have both, ensure 'ni' picks the one you intend to use for caching.
          # For explicit pnpm caching if pnpm is used by 'ni':
          # cache: 'pnpm'
          # For explicit npm caching if npm is used by 'ni':
          cache: "npm"

      - name: Setup @antfu/ni # Installs ni for unified package manager commands
        run: npm i -g @antfu/ni

      - name: Install dependencies
        run: nci # Clean install: uses npm ci, pnpm install --frozen-lockfile, or yarn install --frozen-lockfile

      - name: Prepare dist directory
        run: mkdir -p dist # Create the root dist directory where all built files will go

      - name: Get talk info
        id: talk_info
        env:
          GH_REPO_OWNER: ${{ github.repository_owner }}$GITHUB_ENV"
        run: |
          # Find the path to the last modified slides.md file within presentations/ in the commit
          changed_slide_path=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} -- "presentations/**/slides.md" | tail -n 1)

          if [ -z "$changed_slide_path" ]; then
            echo "::error::No slides.md file found in the changes within presentations/ directory for commit ${{ github.sha }}."
            echo "If this was a manual dispatch or a push to main not directly modifying a slide, ensure the latest commit on the branch includes changes to a slides.md file."
            exit 1
          fi

          echo "Processing slide file: $changed_slide_path"

          # Get the directory of the slides.md file, e.g., presentations/2025-05-07-ai-teknologi
          presentation_dir=$(dirname "$changed_slide_path")

          # Get the base name of that directory, e.g., 2025-05-07-ai-teknologi
          talk_title_full_val=$(basename "$presentation_dir")
          echo "talk_title_full=$talk_title_full_val" >> "$GITHUB_ENV"

          # Extract the part after YYYY-MM-DD- for the base URL path, e.g., ai-teknologi
          base_url_path_name_val=$(echo "$talk_title_full_val" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-//')
          echo "base_url_path_name=$base_url_path_name_val" >> "$GITHUB_ENV"

          repo_name_val="${GITHUB_REPOSITORY#*/}"
          echo "repo_name=$repo_name_val" >> "$GITHUB_ENV"

          # Determine Slidev base URL:
          # For user/org pages (e.g. username.github.io), base is /talks/talk-name
          # For project pages (e.g. username.github.io/repo-name), base is /repo-name/talks/talk-name
          slidev_base_url_prefix=""
          if [ "$repo_name_val" != "${GH_REPO_OWNER}.github.io" ]; then
            slidev_base_url_prefix="/${repo_name_val}"
          fi
          slidev_base_url_val="${slidev_base_url_prefix}/talks/${base_url_path_name_val}"
          echo "slidev_base_url=$slidev_base_url_val" >> "$GITHUB_ENV"

          # Define the output path for Slidev build, relative to the artifact root 'dist'
          build_output_path_val="dist/talks/${base_url_path_name_val}"
          echo "build_output_path=$build_output_path_val" >> "$GITHUB_ENV"

          echo "Derived talk_title_full: $talk_title_full_val"
          echo "Derived base_url_path_name: $base_url_path_name_val"
          echo "Derived repo_name: $repo_name_val"
          echo "Derived slidev_base_url: $slidev_base_url_val"
          echo "Derived build_output_path: $build_output_path_val"

      - name: Build
        run: |
          echo "Building presentation: presentations/${{env.talk_title_full}}/slides.md"
          echo "Slidev base URL: ${{env.slidev_base_url}}"
          echo "Slidev output directory: ${{env.build_output_path}}"
          npx slidev build "presentations/${{env.talk_title_full}}/slides.md" --base "${{env.slidev_base_url}}" --out "${{env.build_output_path}}" --per-slide

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist # Upload the entire dist folder

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build # This job depends on the 'build' job completing successfully
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
